
[ x | ] :drop def

[ drop ] :comment def


"## Stack Manipulation Operators ##" comment

[ x | x x ] :dup def

[ x y | y x ] :swap def

[ y x f | y f call x ] :dip def

[ x y | x y x ] :dipdup def

[ x y z | z x y ] :rot def

[ [[ x | clear ]] match ] :clear def


"## Numeric Operators ##" comment

[ -1 * + ] :- def

[ swap < ] :> def

[ 1 + ] :++ def

[ -1 + ] :-- def

[ 1 swap [ [ dup ] dip * ] times-do swap drop ] :^ def


"## String Operators ##" comment

[ "" [ weld ] fold ] :multiWeld def


"## Boolean Operators ##" comment

[ [[ x x | :true ] [ x y | :nil ]] match ] := def

[ [[ :true :true | :true ] [ x y | :false ]] match ] :and def

[ [[ :true x | :true ] [ x :true | :true ]] match ] :or def

[ [[ :true | :nil ] [ x | :true ]] match ] :not def

[ = not ] :!= def
 

"## Control Flow ##" comment

[ [[ :true x y | x call ] [ z x y | y call ]] match ] :if def

[ [[ 0 f | ] [ n f | f call n 1 - f times-do ]] match ] :times-do def 

[ [[ [] x f | x ] [ xs x f | xs >> x f call f fold ]] match ] :fold def

[ [[ [] f | [] ] [ xs f | xs >> [ f map ] dip f call << ]] match ] :map def


"## Quote Functions ##" comment

[ [] [ swap << ] fold ] :reverse def

[ reverse [ swap << ] fold reverse ] :concat def

[ [] rot [ dup [ << ] dip ++ ] times-do drop ] :range def

[ 1 swap range ] :iota def
